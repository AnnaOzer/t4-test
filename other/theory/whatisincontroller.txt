помимо методов
в контроллере есть ряд интересных свойств
свойств-связей с другими частями системы

$this->data
контейнер для данных, которые будут переданы в представление

$this->app
ссылка на объект текущего приложения
на объект класса t4\MVC\Application
когда приложение запускается
этот объект живёт в памяти
создаёт контроллер
и сам себя к контроллеру привязывает
чтобы вы могли обратиться
к каким-то важным свойствам и методам приложения в целом

особую ценность имеют свойства этого объекта:

$this->app->config
уже знаем

$this->app->db
т4 спроектирован так чтобы работать с неограниченным числом баз данных
причем одновременно к разным бд
в отличие от многих других фреймворков
до тех пор, пока вы к соединению не обратились,
оно существует в виде конфига
как только вы к какому-нибудь соединению с БД подключаетесь
это соединение устанавливается
появляется объект класса T4\Dbal\Connections
а конфиг продолжает существовать
$this->app->db это ленивая инициализация соединения с базой данных
с объектом класса коннекшн потом можно делать разные вещи
например исполнение запроса к БД

$this->app->extensions
$this->app->request
объект содержащий в себе данные из запроса от пользователя
это объект и строка одновременно
еще один пример полиморфизма
можно смотреть что в get
но фильтрации не происходит
зато $this->app->request->files отфильтрованный

$this->app->router
$this->app->user

$this->app->assets
ресурсы
то что мы публикуем
в index.html может быть прописан css файлик
но он в папке protected
а клиент видит только папочку public
для этого есть понятие публикации ресурсов
подключая файл пишем путь относительно protected
что происходит
этот assets, менеджер ресурсов, обнаруживает, что этот файлик  у нас в protected
взял и скопировал его в папочку public/...создал временную папку название хеш../assets
в шаблон этот url где publishCss() попал
далее фреймворк следит за актуальностью ресурсов на основе даты последнего изменения
и автоматически обновляет копию ресурса

$this->app->flash

$this->view
объект класса View,
который будет управлять отображением страницы после того,
как контроллер закончит работу


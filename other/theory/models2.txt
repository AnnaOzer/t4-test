Модели - это объектноориентированное отображение базы данных

задача оэрэм в т4 простая
в виде класса отобразить таблицу
в виде объекта отобразить запись

существует возможность для работы с разными БД

QUERY BUILDER и драйвера БД

квери билдер это простой класс для построения запросов к БД
T4\Dbal\QueryBuilder
умеет запоминать в себе разные части эскуэль запроса
у него много цепочечных методов
каждый из который запоминает в чебе чать эскуэль запроса

квери билдер не выполняет запрос,
его цель собрать запрос из частей воедино
методом getQuery('mysql')
 в скобках указать для какой конкретно базы запрос
 также работает для pgsql

 -----
 обращаясь к модели,
 мы не знаем какое у неё соединение
 но говорим "модель дай нам своё соединение"

везде, где допускается эскуэль запрос,
допускается и объект кверибилдер

через
1)getDbConnection
или
2)findAllByQuery
данные будут получены и преобразованы в объекты этой модели

т.е. квери билдер это первый слой абстракции от баз данных
который позволяет вам писать эскуэль запросы ни что иное
это построитель эскуэль запросов
немного независимый от конкретной базы даннных
который умеет сам себя превратить в запрос для этой базы данных максимально адаптированный

как квери билдер это делает?

использует драйвер базы данных
самый нижний уровень абстракции


драйвер это класс
который реализует много много разных методов
это толстый большой класс
собирает в себе все методы, нужные для общения с конкретной БД

драйвер бд так же осуществляет перевод абстрактных типов в реальные типы

главная задача драйвера БД  - дать одинаковый интерфейс для типовых задач для БД


------------------------
реляционная бд
как реализуются связи между таблицами
пример про библиотеку с книгами и авторами

1) с помощью миграции создаем таблицу с авторами
php protected\t4.php /migrate/create --name=createAuthors
2) в миграции прописываем методы ап и даун
3) php protected\t4.php /migrate
запуск миграции
4) создание модели Author
5) заполнить пару строк в таблице авторов в пхпмайадмин

6) с помощью миграции создать таблицу для книг
php protected\t4.php /migrate/create --name=createBooks
поле для связи так оформим
(два подчеркивания, имя модели, одно подчеркивание, id)
(чтобы не думать о типе поля для связи в т4 пишут линк)
'__author_id' => ['type' => 'link'],
7) php protected\t4.php /migrate
  запуск миграции
8) создание модели книга Book
в схему модели поле связи в списке колонок не пишется
это поле служебное и есть только в миграции
мы его создаём для связи с другими таблицами
9) надо описать связь т.е. relation
рилейшенз часть схемы
рилейшенз это массив
ключи названия связей, например автор
в значении массив
    указать тип связи - их всего 4 имена заданы константами
        self::BELONGS_TO (простейший случай когда книга принадлежит одному автору)
        еще есть HAS_ONE HAS_MANY MANY_TO_MANY
дальше т4 всё вычислит  само
10) заполнить таблицу книги данными через пхпмайадмин
11) обратиться к свойствам модели

Данный пример демонстрирует:
1) всё, что прописано в релейшенз модели
становится её свойством
и может быть для красоты подсветки кода прописанов пхпдоке
2) когда мы получаем книгу из базы, никакого автора нет
автор появляется тогда, когда мы обращаемся к этому свойству
это называется ленивая загрузка
т.е. запрос к базе "достано автора" возникнет Т и ТТ когда
нам реально эта информация потребуется
если мы к полю автор не будем обращаться,
запроса к таблице автор вообще не будет

12) написать рилейшенз для главной модели
13) посмотреть что доступ к книгам данного автора есть
(получим коллекцию книг)
хэзмэни автоматически приводит к тому что возвращается коллекция
она может быть пустой, и для проверки этого надо пользоваться методом изэмпти
в то время как билонгсту приводит нас к одной конкретной модели

! поля которые в рилейшенз в форич не участвуют
иначе форич привёл бы к бесконечным запросам к базе


HAS_ONE
пусть разобьем данные про людей на 2 таблицы
persons (айди имя)
persons_extra (дополнительные необязательные)

Extra BELONGS_TO Person
Person HAS_ONE Extra
хэзуан охначает что возвращай не коллекцию а эту конкретную одну запись

сценарий
кого-то найти по дополтительным данным по нику в скайпе
потом узнать что за человек такой

---------
MANY_TO_MANY
связи реализуются через промежуточную таблицу
в которой будут записи
авторАйди и книгаАйди
и если есть такая запись, мы считаем, что связь у нас с вами установлена
1) откатим миграцию которая создает таблицу книги
php protected\t4.php /migrate/down
2) уберем поле связи author_id
пропишем создание еще одной таблицы в той же миграции,
по алфавиту берем таблицы, которые связываем
название новой таблицы строится так
    множ число названия первой модели
    _to_
    множ число названия второй модели
эта таблица должна состоять из 2 полей
3) запустить миграцию
php protected\t4.php /migrate
4) заполнить через пхпмайадмин таблицы книги и таблицу связей
5) что нам надо поменять в моделях
MANY_TO_MANY возвращает коллекцию